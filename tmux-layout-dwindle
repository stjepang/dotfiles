#!/bin/bash
#
# Adapted from tmux-layout-dwindle:
# - Written in 2016 by Suraj N. Kurapati <https://github.com/sunaku>
# - Documented at <https://sunaku.github.io/tmux-layout-dwindle.html>

# decide how windows are split
n=$(tmux list-panes | wc -l)
w=$(tmux display-message -p '#{window_width}')
h=$(tmux display-message -p '#{window_height}')
dirs=()
for ((i=0;i<n;i++)); do
  # choose split direction
  if [ $(( h * 100 / 25 )) -ge $w ]; then
    dir=1
  else
    dir=0
  fi

  # if we are going three times in the same direction, switch it
  if [[ ${#dirs[@]} -ge 2 && ${dirs[-1]} -eq $dir && ${dirs[-2]} -eq $dir ]]; then
    dir=$(( 1 - dir ))
  fi

  if [ $dir -eq 0 ]; then
    # split horizontally
    w=$(( (w - 1) / 2 ))
  else
    # split vertically
    h=$(( (h - 1) / 2 ))
  fi
  dirs+=($dir)
done

# gather information about the current state of the window and its panes
set -- $(tmux list-panes -F '#{pane_id}')
selected_pane=$(tmux display-message -p '#{pane_id}')
historic_pane=$(tmux last-pane 2>/dev/null \;\
                     display-message -p '#{pane_id}' \;\
                     last-pane) || : # exit 1: no last pane
window_height=$(tmux display-message -p '#{window_height}')

# execute all tmux commands in one shot to avoid flickering and slowness
exec tmux $({

  # flatten current layout, stacking all panes vertically like pancakes
  echo select-layout even-vertical

  # transform pane stack into binary space partitions of dwindling size
  count=0
  for pane_id; do
    if [ $(( $count + 1 )) -eq $# ]; then
      break # skip last pane because .+1 wraps around to the first pane
    elif [ ${dirs[$count]} -eq 0 ]; then
      move_h=+
    else
      move_h=
    fi
    echo resize-pane -t $pane_id -y $window_height # make room for move
    echo select-pane -t $pane_id # for relative pane addressing in move
    echo move-pane -d -s .+1 -t . ${move_h:+-h} # move it
    count=$(( count + 1 ))
  done

  # divide available space evenly among panes (binary space partitions)
  branch_height=$window_height
  count=0
  for pane_id; do
    if [ $(( $count + 1 )) -eq $# ]; then
      break # skip last pane because it will already be sized correctly
    elif [ ${dirs[$count]} -eq 1 ]; then
      # every other pane is a branch in the binary space partition tree
      parent_height=$branch_height
      resize_y=$(( $branch_height / 2 ))
      branch_height=$(( (branch_height - 1) / 2 ))
      echo resize-pane -t $pane_id -y $resize_y
    fi
    count=$(( count + 1 ))
  done

  # restore pane selection back to how it was before we did any of this
  test -n "$historic_pane" && echo select-pane -t $historic_pane
  echo select-pane -t $selected_pane

} | sed 's/$/ ;/')
